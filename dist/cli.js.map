{"version":3,"file":"cli.js","mappings":"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","sources":["webpack://openapi-examples-validator/./src/application-error.js","webpack://openapi-examples-validator/./src/cli.js","webpack://openapi-examples-validator/./src/const/result-type.js","webpack://openapi-examples-validator/./src/impl/index.js","webpack://openapi-examples-validator/./src/impl/service/all-properties-required.js","webpack://openapi-examples-validator/./src/impl/service/common.js","webpack://openapi-examples-validator/./src/impl/service/no-additional-properties.js","webpack://openapi-examples-validator/./src/impl/v2/index.js","webpack://openapi-examples-validator/./src/impl/v3/index.js","webpack://openapi-examples-validator/./src/index.js","webpack://openapi-examples-validator/./src/utils/index.js","webpack://openapi-examples-validator/./src/validator.js","webpack://openapi-examples-validator/./package.json","webpack://openapi-examples-validator/external commonjs \"ajv-draft-04\"","webpack://openapi-examples-validator/external commonjs \"ajv-formats\"","webpack://openapi-examples-validator/external commonjs \"commander\"","webpack://openapi-examples-validator/external commonjs \"errno\"","webpack://openapi-examples-validator/external commonjs \"glob\"","webpack://openapi-examples-validator/external commonjs \"json-pointer\"","webpack://openapi-examples-validator/external commonjs \"json-schema-ref-parser\"","webpack://openapi-examples-validator/external commonjs \"jsonpath-plus\"","webpack://openapi-examples-validator/external commonjs \"lodash.clonedeep\"","webpack://openapi-examples-validator/external commonjs \"lodash.flatmap\"","webpack://openapi-examples-validator/external commonjs \"lodash.flatten\"","webpack://openapi-examples-validator/external commonjs \"lodash.merge\"","webpack://openapi-examples-validator/external commonjs \"yaml\"","webpack://openapi-examples-validator/external node-commonjs \"fs\"","webpack://openapi-examples-validator/external node-commonjs \"path\"","webpack://openapi-examples-validator/webpack/bootstrap","webpack://openapi-examples-validator/webpack/startup"],"sourcesContent":["const\n    merge = require('lodash.merge'),\n    { ENOENT } = require('errno').code;\n\n// TYPEDEFINITIONS\n\n/**\n * @typedef {{}} CustomError\n * @augments Error\n */\n\n/**\n * ApplicationErrorOptions\n * @typedef {{\n *      [instancePath]: string,\n *      [examplePath]: string,\n *      [exampleFilePath]: string,\n *      [keyword]: string,\n *      [message]: string,\n *      [mapFilePath]: string,\n *      [params]: {\n *          [path]: string,\n *          [missingProperty]: string,\n *          [type]: string\n *      },\n *      [schemaPath]: string\n * }} ApplicationErrorOptions\n */\n\n// CONSTANTS\n\nconst ErrorType = {\n    jsENOENT: ENOENT.code,\n    jsonPathNotFound: 'JsonPathNotFound',\n    errorAndErrorsMutuallyExclusive: 'ErrorErrorsMutuallyExclusive',\n    parseError: 'ParseError',\n    validation: 'Validation'\n};\n\n// CLASSES\n\n/**\n * Unified application-error\n */\nclass ApplicationError {\n    /**\n     * Factory-function, which is able to consume validation-errors and JS-errors. If a validation error is passed, all\n     * properties will be adopted.\n     * @param {Error|CustomError}   err     Javascript-, validation- or custom-error, to create the application-error\n     *                                      from\n     * @returns {ApplicationError} Unified application-error instance\n     */\n    static create(err) {\n        const { code, message, path, cause } = err,               // Certain properties of Javascript-errors\n            type = code || err.type || ErrorType.validation,    // If `code` is available then it's a Javascript-error\n            options = { message };\n        if (ErrorType.validation === type || ErrorType.errorAndErrorsMutuallyExclusive === type) {\n            // For certain, created error-types, copy all properties\n            merge(options, err);\n        } else {\n            // Copy certain properties of Javascript-error (but only if available)\n            path && merge(options, { params: { path } });\n            cause && merge(options, cause);\n        }\n        return new ApplicationError(type, options);\n    }\n\n    /**\n     * Constructor\n     * @param {string}                  type        Type of error (see statics)\n     * @param {ApplicationErrorOptions} [options]   Optional properties\n     */\n    constructor(type, options = {}) {\n        Object.assign(this, {\n            type,\n            ...options\n        });\n    }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n    ApplicationError,\n    ErrorType\n};\n","// Shebang will be added by webpack\n//#!/usr/bin/env node --harmony\n\n/**\n * Command Line Interface for the validator\n */\n\nconst\n    VERSION = require('../package.json').version,\n    program = require('commander'),\n    { validateFile, validateExample, validateExamplesByMap } = require('./index');\n\n// FOR AUTOMATED TESTS\n\nconst ENV_TEST = process.env.OPENAPI_EXAMPLES_VALIDATOR_TESTS === 'true';\n\n// DEFINE CLI\n\nprogram\n    .version(VERSION)\n    .arguments('<filepath>')\n    .description('Validate embedded examples in OpenAPI-specs (JSON and YAML supported).\\n'\n        + '  To validate external examples, use the `-s` and `-e` option.\\n'\n        + '  To pass a mapping-file, to validate multiple external examples, use the `-m` option.')\n    .option('-s, --schema-jsonpath <schema-jsonpath>', 'Path to OpenAPI-schema, to validate the example file against')\n    .option('-e, --example-filepath <example-filepath>', 'file path to example file, to be validated')\n    .option('-m, --mapping-filepath <mapping-filepath>', 'file path to map, containing schema-paths as key and the'\n        + ' file-path(s) to examples as value. If wildcards are used, the parameter has to be put in quotes.')\n    .option('-c, --cwd-to-mapping-file', \"changes to the directory of the mapping-file, before resolving the example's\"\n        + ' paths. Use this option, if your mapping-files use relative paths for the examples')\n    .option('-n, --no-additional-properties', 'don\\'t allow properties that are not described in the schema')\n    .option('-r, --all-properties-required', 'make all the properties in the schema required')\n    .option('-o, --ignore-formats <ignored-formats...>', 'Datatype formats to ignore '\n        + '(to prevent \"unknown format\" message in the error-console.)')\n    .action(processAction);\nprogram.on('--help', () => {\n    console.log('\\n\\n  Example for external example-file:\\n');\n    console.log('    $ openapi-examples-validator -s $.paths./.get.responses.200.schema -e example.json'\n        + ' openapi-spec.json\\n\\n');\n});\n// Execute and export promise (for automated tests)\nmodule.exports = program.parseAsync(process.argv);\n\n// IMPLEMENTATION DETAILS\n\nasync function processAction(filepath, options) {\n    const { schemaJsonpath, exampleFilepath, mappingFilepath, cwdToMappingFile, allPropertiesRequired } = options,\n        noAdditionalProperties = !options.additionalProperties,\n        ignoreFormats = _prepareIgnoreFormats(options.ignoreFormats);\n    let result;\n    if (mappingFilepath) {\n        console.log('Validating with mapping file');\n        result = await validateExamplesByMap(filepath, mappingFilepath, {\n            cwdToMappingFile,\n            noAdditionalProperties,\n            ignoreFormats,\n            allPropertiesRequired\n        });\n    } else if (schemaJsonpath && exampleFilepath) {\n        console.log('Validating single external example');\n        result = await validateExample(filepath, schemaJsonpath, exampleFilepath, {\n            noAdditionalProperties,\n            ignoreFormats,\n            allPropertiesRequired\n        });\n    } else {\n        console.log('Validating examples');\n        result = await validateFile(filepath, {\n            noAdditionalProperties,\n            ignoreFormats,\n            allPropertiesRequired\n        });\n    }\n    _handleResult(result);\n}\n\nfunction _handleResult(result) {\n    const noExit = ENV_TEST;\n    _printStatistics(result.statistics);\n    if (result.valid) {\n        process.stdout.write('\\nNo errors found.\\n\\n');\n        !noExit && process.exit(0);\n        return;\n    }\n    process.stdout.write('\\nErrors found.\\n\\n');\n    process.stderr.write(JSON.stringify(result.errors, null, '    '));\n    !noExit && process.exit(1);\n}\n\nfunction _printStatistics(statistics) {\n    const {\n            schemasWithExamples,\n            examplesWithoutSchema,\n            examplesTotal,\n            matchingFilePathsMapping\n        } = statistics,\n        strStatistics = [\n            `Schemas with examples found: ${ schemasWithExamples }`,\n            `Examples without schema found: ${ examplesWithoutSchema }`,\n            `Total examples found: ${ examplesTotal }`\n        ];\n    if (matchingFilePathsMapping != null) {\n        strStatistics.push(`Matching mapping files found: ${ matchingFilePathsMapping }`);\n    }\n    process.stdout.write(`${ strStatistics.join('\\n') }\\n`);\n}\n\nfunction _prepareIgnoreFormats(ignoreFormats) {\n    if (ignoreFormats == null || !Array.isArray(ignoreFormats)) { return ignoreFormats; }\n    if (ignoreFormats.length !== 1) { return ignoreFormats; }\n    // If only one argument has been passed, with all formats separated by newlines\n    if (ignoreFormats[0].indexOf('\\n') === -1) { return ignoreFormats; }\n    return ignoreFormats[0].split('\\n').filter(entry => !entry.match(/^\\s*$/));\n}\n","module.exports = {\n    parent: 'parent',\n    parentProperty: 'parentProperty',\n    path: 'path',\n    pointer: 'pointer',\n    value: 'value'\n};\n","/**\n * Entry point for logic that only applies to specific versions of the OpenAPI-spec\n */\n\nconst implV2 = require('./v2/index'),\n    implV3 = require('./v3/index');\n\nconst REGEX__OPEN_API = /^3\\./;\n\nmodule.exports = {\n    getImplementation\n};\n\n/**\n * Get the version-specific implementation for the OpenAPI-spec. Currently v2 and v3 are supported\n * @param {Object}  openapiSpec OpenAPI-spec\n * @returns {Object|null}\n */\nfunction getImplementation(openapiSpec) {\n    if (typeof openapiSpec.swagger === 'string') {\n        return implV2;\n    }\n    if (openapiSpec.openapi && openapiSpec.openapi.match(REGEX__OPEN_API)) {\n        return implV3;\n    }\n    return null;\n}\n","const { applyCallbackToAllObjectModels } = require('./common');\n\nmodule.exports = {\n    setAllPropertiesRequired\n};\n\n/**\n * Sets all properties of each object to required\n * @param {Object}                  openApiSpec         The to-be-modified schema\n * @param {Array.<String>}          [examplePaths=[]]   The paths to the examples, which's content must not be modified\n */\nfunction setAllPropertiesRequired(openApiSpec, examplePaths = []) {\n    applyCallbackToAllObjectModels(openApiSpec, examplePaths,\n        () => {\n            return (value) => {\n                if (value.hasOwnProperty('properties')) {\n                    value.required = Object.keys(value.properties);\n                }\n            };\n        });\n}\n","const { JSONPath: jsonPath } = require('jsonpath-plus'),\n    ResultType = require('../../const/result-type');\n\nmodule.exports = {\n    applyCallbackToAllObjectModels\n};\n\n/**\n * @typedef {{\n *     path: String,\n *     value: Object,\n *     parent: Object,\n *     parentProperty: String,\n *     hasArrExpr: Boolean\n * }} JsonPathMatchData\n */\n\n/**\n * Callback that is applied to a JSONPath-match.\n * @callback JsonPathMatchCallback\n * @param {Object}              value       Value of the matched property\n * @param {String}              resultType  Result-type of the query\n * @param {JsonPathMatchData}   data        Object that contains additional data to the match\n */\n\n/**\n * Function to build a callback that is applied to a JSONPath-match.\n * @callback JsonPathMatchCallbackBuilder\n * @param {string}                 jsPath  Path to the property that matched\n * @return {JsonPathMatchCallback}         Callback that is applied to a JSONPath-match\n */\n\n/**\n * Apply the input rule to all models of type object in the input openApiSpec\n * @param {Object}                 openApiSpec           The to-be-modified schema\n * @param {Array.<String>}         [examplePaths]        The paths to the examples, which's content must not be modified\n * @param {JsonPathMatchCallbackBuilder}  [matchCallbackBuilder]  Function to build a callback\n *                                                                that will be called on each match\n */\nfunction applyCallbackToAllObjectModels(openApiSpec, examplePaths, matchCallbackBuilder) {\n    // Find all matches\n    const paths = new Set();\n    _find(openApiSpec, '$..schema..')\n        .forEach(match => {\n            if (_isPropertiesDefinition(match)) { return; }\n            paths.add(match);\n        });\n    // Exclude examples\n    _excludeExamples(openApiSpec, paths, examplePaths);\n    // Set flag\n    for (const jsPath of paths) {\n        const callback = matchCallbackBuilder(jsPath);\n        _find(openApiSpec, jsPath, ResultType.value, (result, resultType, data) => {\n            if (!_isObjectDefinition(result)) { return; }\n            callback(result, resultType, data);\n        });\n    }\n}\n\n/**\n * Find matching elements in JSON.\n * @param {Object}                  json                JSON to be searched\n * @param {String}                  path                JSON-path to search\n * @param {String}                  [resultType=\"path\"] Result-type of the query\n * @param {JsonPathMatchCallback}   [callback]          Function to be called on a match\n * @returns {any} Result of the query, depending on the `resultType`\n * @private\n */\nfunction _find(json, path, resultType = ResultType.path, callback) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        resultType,\n        callback\n    });\n}\n\n/**\n * Remove JSON-paths from `paths` that are included in `examplePaths`\n * @param {Object}          openApiSpec     Open-API spec to search in\n * @param {Set.<String>}    paths           Paths where the examples have to be removed from\n * @param {Array.<String>}  examplePaths    JSON-paths of the examples\n * @private\n */\nfunction _excludeExamples(openApiSpec, paths, examplePaths) {\n    examplePaths\n        .forEach(examplePath => {\n            _find(openApiSpec, examplePath)\n                .forEach(exampleMatch => {\n                    for (const jsPath of paths) {\n                        jsPath.startsWith(exampleMatch) && paths.delete(jsPath);\n                    }\n                });\n        });\n}\n\nfunction _isPropertiesDefinition(path) {\n    // Path has to end with `properties`\n    if (!path.match(/\\['properties']$/)) { return; }\n    // Every second consecutive `properties` actually is not a property-definition, but a property itself\n    const consecutiveMatch = path.match(/(?<!\\['properties'])(\\['properties']\\['properties'])+$/);\n    return !consecutiveMatch || consecutiveMatch.length % 2 !== 0;\n}\n\nfunction _isObjectDefinition(entity) {\n    return entity.type === 'object' || entity.properties;\n}\n","const { applyCallbackToAllObjectModels } = require('./common');\n\nmodule.exports = {\n    setNoAdditionalProperties\n};\n\nconst JSON_SCHEMA_COMBINERS = [\n    'oneOf',\n    'allOf',\n    'anyOf',\n    'not'\n];\n\n/**\n * Sets the flag to indicate that it doesn't allow properties that are not described in the schema\n * @param {Object}                  openApiSpec         The to-be-modified schema\n * @param {Array.<String>}          [examplePaths=[]]   The paths to the examples, which's content must not be modified\n */\nfunction setNoAdditionalProperties(openApiSpec, examplePaths = []) {\n    // Match all combiner keywords that are not preceded by a 'properties' keyword.\n    // This allow to have objects that have as property name one of the combiner keywords.\n    const hasJsonCombinerParentRegex\n        = new RegExp('(?<!\\\\[\\'properties\\'\\\\])\\\\[\\'(?:' + JSON_SCHEMA_COMBINERS.join('|') + ')\\'\\\\]');\n\n    applyCallbackToAllObjectModels(openApiSpec, examplePaths,\n        (path) => {\n            return (schema) => {\n                // Exclude schema that have a JSON combiner as parent\n                if (hasJsonCombinerParentRegex.test(path)) {\n                    console.warn('\"additionalProperties\" flag not set '\n                        + `for ${path} because it has a parent with a JSON-schema combiner keyword.`);\n                    return;\n                }\n                // Exclude schema that contains a JSON combiner\n                if (JSON_SCHEMA_COMBINERS.some((combiner) => schema.hasOwnProperty(combiner))) {\n                    console.warn('\"additionalProperties\" flag not set '\n                        + `for ${path} because it contains JSON-schema combiner keyword.`);\n                    return;\n                }\n                // Exclude schema that already contains additionalProperties\n                if (schema.hasOwnProperty('additionalProperties')) {\n                    return;\n                }\n                schema.additionalProperties = false;\n            };\n        });\n}\n","/**\n * Contains validation-logic that is specific to V2 of the OpenAPI-spec\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    cloneDeep = require('lodash.clonedeep'),\n    { setAllPropertiesRequired } = require('../service/all-properties-required'),\n    { setNoAdditionalProperties } = require('../service/no-additional-properties');\n\n// CONSTANTS\n\nconst PATH__EXAMPLES = '$..examples.application/json',\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLES = 'examples';\n\nmodule.exports = {\n    buildValidationMap,\n    escapeExampleName,\n    getJsonPathsToExamples,\n    prepare,\n    unescapeExampleNames\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() { return [PATH__EXAMPLES]; }\n\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const pathSchema = _getSchemaPathOfExample(pathExample);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec                     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    allPropertiesRequired && setAllPropertiesRequired(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Escapes the name of the example.\n * @param {string} rawPath  Unescaped path\n * @returns {string} Escaped path\n * @private\n */\nfunction escapeExampleName(rawPath) {\n    // No escaping necessary in v2, as there are no named-examples\n    return rawPath;\n}\n\n/**\n * Escaped example-names reflect in the result (where they shouldn't). This function reverts it.\n * @param {string} rawPath  Escaped path\n * @returns {string} Unescaped path\n */\nfunction unescapeExampleNames(rawPath) {\n    // No unescaping necessary in v2, as there are no named-examples\n    return rawPath;\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n * @param {String}  pathExample JSON-path to example\n * @returns {String} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExamples = pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return jsonPath.toPathString(pathSegs);\n}\n","/**\n * Contains validation-logic that is specific to V3 of the OpenAPI-spec\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    cloneDeep = require('lodash.clonedeep'),\n    { ApplicationError, ErrorType } = require('../../application-error'),\n    { setAllPropertiesRequired } = require('../service/all-properties-required'),\n    { setNoAdditionalProperties } = require('../service/no-additional-properties');\n\n// CONSTANTS\n\nconst PATH__EXAMPLE = '$..responses..content.application/json.example',\n    PATH__EXAMPLES = '$..responses..content.application/json.examples.*.value',\n    PATH__EXAMPLE__PARAMETER = '$..parameters..example',\n    PATH__EXAMPLES__PARAMETER = '$..parameters..examples.*.value',\n    PATH__EXAMPLE__REQUEST_BODY = '$..requestBody.content.application/json.example',\n    PATH__EXAMPLES__REQUEST_BODY = '$..requestBody.content.application/json.examples.*.value',\n    PROP__SCHEMA = 'schema',\n    PROP__EXAMPLE = 'example',\n    PROP__EXAMPLES = 'examples';\n\nconst ExampleType = {\n    single: 'single',\n    multi: 'multi'\n};\n\n// PUBLIC API\n\nmodule.exports = {\n    buildValidationMap,\n    escapeExampleName,\n    getJsonPathsToExamples,\n    prepare,\n    unescapeExampleNames\n};\n\n// IMPLEMENTATION DETAILS\n\n/**\n * Get the JSONPaths to the examples\n * @returns {Array.<String>}    JSONPaths to the examples\n */\nfunction getJsonPathsToExamples() {\n    return [\n        PATH__EXAMPLE,\n        PATH__EXAMPLES,\n        PATH__EXAMPLE__PARAMETER,\n        PATH__EXAMPLES__PARAMETER,\n        PATH__EXAMPLE__REQUEST_BODY,\n        PATH__EXAMPLES__REQUEST_BODY\n    ];\n}\n\n/**\n * Builds a map with the path to the repsonse-schema as key and the paths to the examples, as value. The path of the\n * schema is derived from the path to the example and doesn't necessarily mean that the schema actually exists.\n * @param {Array.<String>}  pathsExamples   Paths to the examples\n * @returns {Object.<String, String>} Map with schema-path as key and example-paths as value\n * @private\n */\nfunction buildValidationMap(pathsExamples) {\n    const exampleTypesOfSchemas = new Map();\n    return pathsExamples.reduce((validationMap, pathExample) => {\n        const { pathSchemaAsArray, exampleType } = _getSchemaPathOfExample(pathExample),\n            pathSchema = jsonPath.toPathString(pathSchemaAsArray),\n            exampleTypeOfSchema = exampleTypesOfSchemas.get(pathSchema);\n        if (exampleTypeOfSchema) {\n            exampleTypeOfSchema !== exampleType && _throwMutuallyExclusiveError(pathSchemaAsArray);\n        }\n        exampleTypesOfSchemas.set(pathSchema, exampleType);\n        validationMap[pathSchema] = (validationMap[pathSchema] || new Set())\n            .add(pathExample);\n        return validationMap;\n    }, {});\n}\n\n/**\n * Pre-processes the OpenAPI-spec, for further use.\n * The passed spec won't be modified. If a modification happens, a modified copy will be returned.\n * @param {Object}  openapiSpec     The OpenAPI-spec as JSON-schema\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @return {Object} The prepared OpenAPI-spec\n */\nfunction prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired } = {}) {\n    const openapiSpecCopy = cloneDeep(openapiSpec);\n    noAdditionalProperties && setNoAdditionalProperties(openapiSpecCopy, getJsonPathsToExamples());\n    allPropertiesRequired && setAllPropertiesRequired(openapiSpecCopy, getJsonPathsToExamples());\n    return openapiSpecCopy;\n}\n\n/**\n * Escapes the name of the example. In order to do that, a backtick has to be added to the beginning of the key.\n * @param {string} rawPath  Unescaped path\n * @returns {string} Escaped path\n * @private\n */\nfunction escapeExampleName(rawPath) {\n    return rawPath.replace(/\\['examples'\\]\\['(.*)\\]\\['value'\\]$/, \"['examples']['`$1]['value']\");\n}\n\n/**\n * Escaped example-names reflect in the result (where they shouldn't). This function reverts it.\n * @param {string} rawPath  Escaped path\n * @returns {string} Unescaped path\n */\nfunction unescapeExampleNames(rawPath) {\n    return rawPath && rawPath.replace(/\\/examples\\/`(.*)\\/value$/, '/examples/$1/value');\n}\n\n/**\n * Gets a JSON-path to the corresponding response-schema, based on a JSON-path to an example.\n *\n * It is assumed that the JSON-path to the example is valid and existing.\n * @param {String}  pathExample JSON-path to example\n * @returns {{\n *     exampleType: ExampleType,\n *     pathSchema: String\n * }} JSON-path to the corresponding response-schema\n * @private\n */\nfunction _getSchemaPathOfExample(pathExample) {\n    const pathSegs = jsonPath.toPathArray(pathExample).slice(),\n        idxExample = pathSegs.lastIndexOf(PROP__EXAMPLE),\n        /** @type ExampleType */\n        exampleType = idxExample > -1\n            ? ExampleType.single\n            : ExampleType.multi,\n        idxExamples = exampleType === ExampleType.single\n            ? idxExample\n            : pathSegs.lastIndexOf(PROP__EXAMPLES);\n    pathSegs.splice(idxExamples, pathSegs.length - idxExamples, PROP__SCHEMA);\n    return {\n        exampleType,\n        pathSchemaAsArray: pathSegs\n    };\n}\n\n/**\n * Checks if only `example` or `examples` is set for the schema, as they are mutually exclusive by OpenAPI-spec.\n * @param {Array.<String>}  pathSchemaAsArray   JSON-path to the Schema, as JSON-path-array\n * @throws ApplicationError if both are set\n * @private\n */\nfunction _throwMutuallyExclusiveError(pathSchemaAsArray) {\n    const pathContextAsArray = pathSchemaAsArray.slice(0, pathSchemaAsArray.length - 1);    // Strip `schema` away\n    throw ApplicationError.create({\n        type: ErrorType.errorAndErrorsMutuallyExclusive,\n        message: 'Properties \"error\" and \"errors\" are mutually exclusive',\n        params: {\n            pathContext: jsonPath.toPointer(pathContextAsArray)\n        }\n    });\n}\n","/**\n * Entry-point for the validator-API\n */\n\nconst\n    merge = require('lodash.merge'),\n    flatten = require('lodash.flatten'),\n    flatMap = require('lodash.flatmap'),\n    fs = require('fs'),\n    path = require('path'),\n    glob = require('glob'),\n    yaml = require('yaml'),\n    { JSONPath: jsonPath } = require('jsonpath-plus'),\n    refParser = require('json-schema-ref-parser'),\n    { createError } = require('errno').custom,\n    ResultType = require('./const/result-type'),\n    { getValidatorFactory, compileValidate } = require('./validator'),\n    Determiner = require('./impl'),\n    { ApplicationError, ErrorType } = require('./application-error'),\n    { createValidationResponse, dereferenceJsonSchema } = require('./utils');\n\n// CONSTANTS\n\nconst SYM__INTERNAL = Symbol('internal'),\n    PROP__SCHEMAS_WITH_EXAMPLES = 'schemasWithExamples',\n    FILE_EXTENSIONS__YAML = [\n        'yaml',\n        'yml'\n    ];\n\n// STATICS\n\n/**\n * ErrorJsonPathNotFound\n * @typedef {{\n *      cause: {\n *          [params]: {\n *              [path]: string\n *          }\n *      }\n * }} ErrorJsonPathNotFound\n * @augments CustomError\n */\n\n/**\n * @constructor\n * @augments CustomError\n * @returns {ErrorJsonPathNotFound}\n */\nconst ErrorJsonPathNotFound = createError(ErrorType.jsonPathNotFound);\n\n// PUBLIC API\n\nmodule.exports = {\n    'default': validateExamples,\n    validateFile,\n    validateExample,\n    validateExamplesByMap\n};\n\n// IMPLEMENTATION DETAILS\n\n// Type definitions\n\n/**\n * ValidationStatistics\n * @typedef {{\n *      schemasWithExamples: number,\n *      examplesTotal: number,\n *      examplesWithoutSchema: number,\n *      [matchingFilePathsMapping]: number\n * }} ValidationStatistics\n */\n\n/**\n * ValidationResponse\n * @typedef {{\n *      valid: boolean,\n *      statistics: ValidationStatistics,\n *      errors: Array.<ApplicationError>\n * }} ValidationResponse\n */\n\n/**\n * @callback ValidationHandler\n * @param {ValidationStatistics}    statistics\n * @returns {Array.<ApplicationError>}\n */\n\n// Public\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {Object}  openapiSpec OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExamples(openapiSpec, { noAdditionalProperties, ignoreFormats, allPropertiesRequired } = {}) {\n    const impl = Determiner.getImplementation(openapiSpec);\n    openapiSpec = await refParser.dereference(openapiSpec);\n    openapiSpec = impl.prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired });\n    let pathsExamples = impl.getJsonPathsToExamples()\n        .reduce((res, pathToExamples) => {\n            return res.concat(_extractExamplePaths(openapiSpec, pathToExamples));\n        }, [])\n        .map(impl.escapeExampleName);\n    return _validateExamplesPaths({ impl }, pathsExamples, openapiSpec, { ignoreFormats });\n}\n\n/**\n * Validates OpenAPI-spec with embedded examples.\n * @param {string}  filePath                        File-path to the OpenAPI-spec\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateFile(filePath, { noAdditionalProperties, ignoreFormats, allPropertiesRequired } = {}) {\n    let openapiSpec = null;\n    try {\n        openapiSpec = await _parseSpec(filePath);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return validateExamples(openapiSpec, { noAdditionalProperties, ignoreFormats, allPropertiesRequired });\n}\n\n/**\n * Validates examples by mapping-files.\n * @param {string}  filePathSchema              File-path to the OpenAPI-spec\n * @param {string}  globMapExternalExamples     File-path (globs are supported) to the mapping-file containing JSON-\n *                                              paths to schemas as key and a single file-path or Array of file-paths\n *                                              to external examples\n * @param {boolean} [cwdToMappingFile=false]    Change working directory for resolving the example-paths (relative to\n *                                              the mapping-file)\n * @param {boolean} [noAdditionalProperties=false] Don't allow properties that are not defined in the schema\n * @param {boolean} [allPropertiesRequired=false]  Make all properties required\n * @param {Array.<string>} [ignoreFormats]      List of datatype formats that shall be ignored (to prevent\n *                                              \"unsupported format\" errors). If an Array with only one string is\n *                                              provided where the formats are separated with `\\n`, the entries\n *                                              will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExamplesByMap(filePathSchema, globMapExternalExamples,\n    { cwdToMappingFile, noAdditionalProperties, ignoreFormats, allPropertiesRequired } = {}\n) {\n    let matchingFilePathsMapping = 0;\n    const filePathsMaps = glob.sync(\n        globMapExternalExamples,\n        // Using `nonull`-option to explicitly create an app-error if there's no match for `globMapExternalExamples`\n        { nonull: true }\n    );\n    let responses = [];\n    // for..of here, to support sequential execution of async calls. This is required, since dereferencing the\n    // `openapiSpec` is not concurrency-safe\n    for (const filePathMapExternalExamples of filePathsMaps) {\n        let mapExternalExamples = null,\n            openapiSpec = null;\n        try {\n            mapExternalExamples = JSON.parse(fs.readFileSync(filePathMapExternalExamples, 'utf-8'));\n            openapiSpec = await _parseSpec(filePathSchema);\n            openapiSpec = Determiner.getImplementation(openapiSpec)\n                .prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired });\n        } catch (err) {\n            responses.push(createValidationResponse({ errors: [ApplicationError.create(err)] }));\n            continue;\n        }\n        // Not using `glob`'s response-length, because it is `1` if there's no match for `globMapExternalExamples`.\n        // Instead, increment on every match\n        matchingFilePathsMapping++;\n        responses.push(\n            _validate(\n                statistics => {\n                    return _handleExamplesByMapValidation(\n                        openapiSpec, mapExternalExamples, statistics, {\n                            cwdToMappingFile,\n                            dirPathMapExternalExamples: path.dirname(filePathMapExternalExamples),\n                            ignoreFormats\n                        }\n                    ).map(\n                        (/** @type ApplicationError */ error) => Object.assign(error, {\n                            mapFilePath: path.normalize(filePathMapExternalExamples)\n                        })\n                    );\n                }\n            )\n        );\n    }\n    return merge(\n        responses.reduce((res, response) => {\n            if (!res) {\n                return response;\n            }\n            return _mergeValidationResponses(res, response);\n        }, null),\n        { statistics: { matchingFilePathsMapping } }\n    );\n}\n\n/**\n * Validates a single external example.\n * @param {String}  filePathSchema                  File-path to the OpenAPI-spec\n * @param {String}  pathSchema                      JSON-path to the schema\n * @param {String}  filePathExample                 File-path to the external example-file\n * @param {boolean} [noAdditionalProperties=false]  Don't allow properties that are not described in the schema\n * @param {boolean} [allPropertiesRequired=false]   Make all properties required\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n */\nasync function validateExample(filePathSchema, pathSchema, filePathExample, {\n    noAdditionalProperties,\n    ignoreFormats,\n    allPropertiesRequired\n} = {}) {\n    let example = null,\n        schema = null,\n        openapiSpec = null;\n    try {\n        example = JSON.parse(fs.readFileSync(filePathExample, 'utf-8'));\n        openapiSpec = await _parseSpec(filePathSchema);\n        openapiSpec = Determiner.getImplementation(openapiSpec)\n            .prepare(openapiSpec, { noAdditionalProperties, allPropertiesRequired });\n        schema = _extractSchema(pathSchema, openapiSpec);\n    } catch (err) {\n        return createValidationResponse({ errors: [ApplicationError.create(err)] });\n    }\n    return _validate(\n        statistics => _validateExample({\n            createValidator: _initValidatorFactory(openapiSpec, { ignoreFormats }),\n            schema,\n            example,\n            statistics,\n            filePathExample\n        })\n    );\n}\n\n// Private\n\n/**\n * Parses the OpenAPI-spec (supports JSON and YAML)\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {object}    Parsed OpenAPI-spec\n * @private\n */\nasync function _parseSpec(filePath) {\n    const isYaml = _isFileTypeYaml(filePath);\n    let jsonSchema;\n\n    if (isYaml) {\n        try {\n            jsonSchema = yaml.parse(fs.readFileSync(filePath, 'utf-8'));\n        } catch (e) {\n            const { name, message } = e;\n            throw new ApplicationError(ErrorType.parseError, { message: `${name}: ${message}` });\n        }\n    } else {\n        jsonSchema = JSON.parse(fs.readFileSync(filePath, 'utf-8'));\n    }\n\n    return await dereferenceJsonSchema(filePath, jsonSchema);\n}\n\n/**\n * Determines whether the filePath is pointing to a YAML-file\n * @param {String}  filePath    File-path to the OpenAPI-spec\n * @returns {boolean}   `true`, if the file is a YAML-file\n * @private\n */\nfunction _isFileTypeYaml(filePath) {\n    const extension = filePath.split('.').pop();\n    return FILE_EXTENSIONS__YAML.includes(extension);\n}\n\n/**\n * Top-level validator. Prepares common values, required for the validation, then calles the validator and prepares\n * the result for the output.\n * @param {ValidationHandler}   validationHandler       The handler which performs the validation. It will receive the\n *                                                      statistics-object as argument and has to return an Array of\n *                                                      errors (or an empty Array, when all examples are valid)\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validate(validationHandler) {\n    const statistics = _initStatistics(),\n        errors = validationHandler(statistics);\n    return createValidationResponse({ errors, statistics });\n}\n\n/**\n * Validates examples by a mapping-file.\n * @param {Object}                  openapiSpec                     OpenAPI-spec\n * @param {Object}                  mapExternalExamples             Mapping-file containing JSON-paths to schemas as\n *                                                                  key and a single file-path or Array of file-paths\n *                                                                  to external examples\n * @param {ValidationStatistics}    statistics                      Validation-statistics\n * @param {boolean}                 [cwdToMappingFile=false]        Change working directory for resolving the example-\n *                                                                  paths (relative to the mapping-file)\n * @param {string}                  [dirPathMapExternalExamples]    The directory-path of the mapping-file\n * @param {Array.<string>} [ignoreFormats]          List of datatype formats that shall be ignored (to prevent\n *                                                  \"unsupported format\" errors). If an Array with only one string is\n *                                                  provided where the formats are separated with `\\n`, the entries\n *                                                  will be expanded to a new array containing all entries.\n * @returns {Array.<ApplicationError>}\n * @private\n */\nfunction _handleExamplesByMapValidation(openapiSpec, mapExternalExamples, statistics,\n    { cwdToMappingFile = false, dirPathMapExternalExamples, ignoreFormats }\n) {\n    return flatMap(Object.entries(mapExternalExamples), ([pathSchema, filePathsExample]) => {\n        let schema = null;\n        try {\n            schema = _extractSchema(pathSchema, openapiSpec);\n        } catch (/** @type ErrorJsonPathNotFound */ err) {\n            // If the schema can't be found, don't even attempt to process the examples\n            return ApplicationError.create(err);\n        }\n        return flatMap(\n            flatten([filePathsExample]),\n            filePathExample => {\n                let examples = [];\n                try {\n                    const resolvedFilePathExample = cwdToMappingFile\n                        ? path.join(dirPathMapExternalExamples, filePathExample)\n                        : filePathExample;\n                    const globResolvedFilePathExample = glob.sync(resolvedFilePathExample);\n                    if (globResolvedFilePathExample.length === 0) {\n                        return [ApplicationError.create({\n                            type: ErrorType.jsENOENT,\n                            message: `No such file or directory: '${resolvedFilePathExample}'`,\n                            path: resolvedFilePathExample\n                        })];\n                    }\n                    for (const filePathExample of globResolvedFilePathExample) {\n                        examples.push({\n                            path: path.normalize(filePathExample),\n                            content: JSON.parse(fs.readFileSync(filePathExample, 'utf-8'))\n                        });\n                    }\n                } catch (err) {\n                    return [ApplicationError.create(err)];\n                }\n                return flatMap(examples, example => _validateExample({\n                    createValidator: _initValidatorFactory(openapiSpec, { ignoreFormats }),\n                    schema,\n                    example: example.content,\n                    statistics,\n                    filePathExample: example.path\n                }));\n            }\n        );\n    });\n}\n\n/**\n * Merges two `ValidationResponses` together and returns the merged result. The passed `ValidationResponse`s won't be\n * modified.\n * @param {ValidationResponse} response1\n * @param {ValidationResponse} response2\n * @returns {ValidationResponse}\n * @private\n */\nfunction _mergeValidationResponses(response1, response2) {\n    return createValidationResponse({\n        errors: response1.errors.concat(response2.errors),\n        statistics: Object.entries(response1.statistics)\n            .reduce((res, [key, val]) => {\n                if (PROP__SCHEMAS_WITH_EXAMPLES === key) {\n                    [\n                        response1,\n                        response2\n                    ].forEach(response => {\n                        const schemasWithExample = response.statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES]\n                            .values();\n                        for (let schema of schemasWithExample) {\n                            res[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n                        }\n                    });\n                    return res;\n                }\n                res[key] = val + response2.statistics[key];\n                return res;\n            }, _initStatistics())\n    });\n}\n\n/**\n * Extracts all JSON-paths to examples from a OpenAPI-spec\n * @param {Object}  openapiSpec         OpenAPI-spec\n * @param {String}  jsonPathToExamples  JSON-path to the examples, in the OpenAPI-Spec\n * @returns {Array.<String>} JSON-paths to examples\n * @private\n */\nfunction _extractExamplePaths(openapiSpec, jsonPathToExamples) {\n    return jsonPath({\n        json: openapiSpec,\n        path: jsonPathToExamples,\n        resultType: ResultType.path\n    });\n}\n\n/**\n * Validates examples at the given paths in the OpenAPI-spec.\n * @param {Object}          impl            Spec-dependant validator\n * @param {Array.<String>}  pathsExamples   JSON-paths to examples\n * @param {Object}          openapiSpec     OpenAPI-spec\n * @param {Array.<string>} [ignoreFormats]  List of datatype formats that shall be ignored (to prevent\n *                                          \"unsupported format\" errors). If an Array with only one string is\n *                                          provided where the formats are separated with `\\n`, the entries\n *                                          will be expanded to a new array containing all entries.\n * @returns {ValidationResponse}\n * @private\n */\nfunction _validateExamplesPaths({ impl }, pathsExamples, openapiSpec, { ignoreFormats }) {\n    const statistics = _initStatistics(),\n        validationResult = {\n            valid: true,\n            statistics,\n            errors: []\n        },\n        createValidator = _initValidatorFactory(openapiSpec, { ignoreFormats });\n    let validationMap;\n    try {\n        // Create mapping between JSON-schemas and examples\n        validationMap = impl.buildValidationMap(pathsExamples);\n    } catch (error) {\n        // Throw unexpected errors\n        if (!(error instanceof ApplicationError)) {\n            throw error;\n        }\n        // Add known errors and stop\n        validationResult.valid = false;\n        validationResult.errors.push(error);\n        return validationResult;\n    }\n    // Start validation\n    const schemaPaths = Object.keys(validationMap);\n    schemaPaths.forEach(pathSchema => {\n        _validateSchema({\n            openapiSpec, createValidator, pathSchema, validationMap, statistics,\n            validationResult\n        });\n    });\n    // Revert escaped example names from the results\n    validationResult.errors.forEach((example) => {\n        example.examplePath = impl.unescapeExampleNames(example.examplePath);\n    });\n    return validationResult;\n}\n\n/**\n * Validates a single schema.\n * @param {Object}                  openapiSpec         OpenAPI-spec\n * @param {ajv}                     createValidator     Factory, to create JSON-schema validator\n * @param {string}                  pathSchema          JSON-path to schema (for request- or response-property)\n * @param {Object.<String, String>} validationMap Map with schema-path as key and example-paths as value\n * @param {Object}                  statistics          Object to contain statistics metrics\n * @param {Object}                  validationResult    Container, for the validation-results\n * @private\n */\nfunction _validateSchema({\n    openapiSpec, createValidator, pathSchema, validationMap, statistics,\n    validationResult\n}) {\n    const errors = validationResult.errors;\n    validationMap[pathSchema].forEach(pathExample => {\n        const example = _getObjectByPath(pathExample, openapiSpec),\n            // Examples with missing schemas may occur and those are considered valid\n            schema = _extractSchema(pathSchema, openapiSpec, true),\n            curErrors = _validateExample({\n                createValidator,\n                schema,\n                example,\n                statistics\n            }).map(error => {\n                error.examplePath = jsonPath.toPointer(jsonPath.toPathArray(pathExample));\n                return error;\n            });\n        if (!curErrors.length) {\n            return;\n        }\n        validationResult.valid = false;\n        errors.splice(errors.length - 1, 0, ...curErrors);\n    });\n}\n\n/**\n * Creates a container-object for the validation statistics.\n * @returns {ValidationStatistics}\n * @private\n */\nfunction _initStatistics() {\n    const statistics = {\n        [SYM__INTERNAL]: {\n            [PROP__SCHEMAS_WITH_EXAMPLES]: new Set()\n        },\n        examplesTotal: 0,\n        examplesWithoutSchema: 0\n    };\n    Object.defineProperty(statistics, PROP__SCHEMAS_WITH_EXAMPLES, {\n        enumerable: true,\n        get: () => statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].size\n    });\n    return statistics;\n}\n\n/**\n * Extract object(s) by the given JSON-path\n * @param {String}  path    JSON-path\n * @param {Object}  json    JSON to extract the object(s) from\n * @returns {Object|Array.<Object>|undefined} All matching objects. Single object if there is only one match\n * @private\n */\nfunction _getObjectByPath(path, json) {\n    return jsonPath({\n        json,\n        path,\n        flatten: true,\n        wrap: false,\n        resultType: ResultType.value\n    });\n}\n\n/**\n * Validates example against the schema. The precondition for this function to work is that the example exists at the\n * given path.\n * `pathExample` and `filePathExample` are exclusively mandatory.\n * itself\n * @param {Function}    createValidator     Factory, to create JSON-schema validator\n * @param {Object}      schema              JSON-schema\n * @param {Object}      example             Example to validate\n * @param {Object}      statistics          Object to contain statistics metrics\n * @param {String}      [filePathExample]   File-path to the example file\n * @returns {Array.<Object>} Array with errors. Empty array, if examples are valid\n * @private\n */\nfunction _validateExample({ createValidator, schema, example, statistics, filePathExample }) {\n    const\n        errors = [];\n    statistics.examplesTotal++;\n    // No schema, no validation (Examples without schema are considered valid)\n    if (!schema) {\n        statistics.examplesWithoutSchema++;\n        return errors;\n    }\n    statistics[SYM__INTERNAL][PROP__SCHEMAS_WITH_EXAMPLES].add(schema);\n    const validate = compileValidate(createValidator(), schema);\n    if (validate(example)) {\n        return errors;\n    }\n    return errors.concat(...validate.errors.map(ApplicationError.create))\n        .map(error => {\n            if (!filePathExample) {\n                return error;\n            }\n            error.exampleFilePath = filePathExample;\n            return error;\n        });\n}\n\n/**\n * Create a new instance of a JSON schema validator\n * @returns {ajv}\n * @private\n */\nfunction _initValidatorFactory(specSchema, { ignoreFormats }) {\n    return getValidatorFactory(specSchema, {\n        schemaId: 'auto',\n        discriminator: true,\n        strict: false,\n        allErrors: true,\n        formats: ignoreFormats && ignoreFormats.reduce((result, entry) => {\n            result[entry] = () => true;\n            return result;\n        }, {})\n    });\n}\n\n/**\n * Extracts the schema in the OpenAPI-spec at the given JSON-path.\n * @param   {string}    pathSchema                          JSON-path to the schema\n * @param   {Object}    openapiSpec                         OpenAPI-spec\n * @param   {boolean}   [suppressErrorIfNotFound=false]     Don't throw `ErrorJsonPathNotFound` if the response does not\n *                                                          exist at the given JSON-path\n * @returns {Object|Array.<Object>|undefined} Matching schema(s)\n * @throws  {ErrorJsonPathNotFound} Thrown, when there is no schema at the given path and\n *                                  `suppressErrorIfNotFound` is false\n * @private\n */\nfunction _extractSchema(pathSchema, openapiSpec, suppressErrorIfNotFound = false) {\n    const schema = _getObjectByPath(pathSchema, openapiSpec);\n    if (!suppressErrorIfNotFound && !schema) {\n        throw new ErrorJsonPathNotFound(`Path to schema can't be found: '${pathSchema}'`, {\n            params: {\n                path: pathSchema\n            }\n        });\n    }\n    return schema;\n}\n","const path = require('path'),\n    refParser = require('json-schema-ref-parser');\n\nmodule.exports = {\n    createValidationResponse,\n    dereferenceJsonSchema\n};\n\n/**\n * Creates a unified response for the validation-result\n * @param {Array.<ApplicationError>}    errors\n * @param {ValidationStatistics}        statistics\n * @returns {ValidationResponse}\n * @private\n */\nfunction createValidationResponse({ errors, statistics = {} }) {\n    return {\n        valid: !errors.length,\n        statistics,\n        errors\n    };\n}\n\n/**\n * Includes all referenced, external schemas (by the keyword `$ref`) into the schema\n *\n * CAUTION: This function is not concurrency-safe !!\n * This function changes the working dir and sets it back. This may become an concurrency issue when there are\n * other tasks running that rely on the working dir while this function waits for the asynchronous task of\n * dereferencing to complete.\n *\n * @param {String} pathToSchema     File-path to the schema\n * @param {Object} jsonSchema       Schema with potential externally referenced schemas\n * @returns {Promise<Object>}       Dereferenced schema\n */\nasync function dereferenceJsonSchema(pathToSchema, jsonSchema) {\n    const currentWorkingDir = process.cwd();\n    // Change the working dir to the schema-path, to make sure that relative paths can be resolved\n    process.chdir(path.dirname(pathToSchema));\n    const dereferencedSchema = await refParser.dereference(jsonSchema);\n    // Restore original working dir\n    process.chdir(currentWorkingDir);\n    return dereferencedSchema;\n}\n","/**\n * Wrapper for the JSONSchema-validator\n */\n\nconst { JSONPath: jsonPath } = require('jsonpath-plus'),\n    JsonPointer = require('json-pointer'),\n    Ajv = require('ajv-draft-04'),\n    addFormats = require('ajv-formats');\n\nconst PROP__ID = '$id',\n    JSON_PATH__REFS = '$..\\$ref',\n    ID__SPEC_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/defs.json',\n    ID__RESPONSE_SCHEMA = 'https://www.npmjs.com/package/openapi-examples-validator/schema.json';\n\nmodule.exports = {\n    getValidatorFactory,\n    compileValidate\n};\n\n/**\n * Get a factory-function to create a prepared validator-instance\n * @param {Object}  specSchema  OpenAPI-spec of which potential local references will be extracted\n * @param {Object}  [options]   Options for the validator\n * @returns {function(): (ajv | ajv.Ajv)}\n */\nfunction getValidatorFactory(specSchema, options) {\n    const preparedSpecSchema = _createReferenceSchema(specSchema);\n    return () => {\n        const validator = new Ajv(options);\n        addFormats(validator);\n\n        validator.addSchema(preparedSpecSchema);\n\n        return validator;\n    };\n}\n\n/**\n * Compiles the validator-function.\n * @param {ajv | ajv.Ajv}   validator       Validator-instance\n * @param {Object}          responseSchema  The response-schema, against the examples will be validated\n * @returns {ajv.ValidateFunction}\n */\nfunction compileValidate(validator, responseSchema) {\n    const preparedResponseSchema = _prepareResponseSchema(responseSchema, ID__RESPONSE_SCHEMA);\n    _replaceRefsToPreparedSpecSchema(preparedResponseSchema);\n\n    let result;\n    try {\n        result = validator.compile(preparedResponseSchema);\n    } catch (e) {\n        result = () => {};\n        result.errors = [e];\n    }\n    return result;\n}\n\n/**\n * Prepares the schema, to be used with internal-references\n * @param {Object}  specSchema  The schema to be prebared\n * @param {String}  idSchema    The unique ID for the schema\n * @returns {Object}\n * @private\n */\nfunction _prepareResponseSchema(specSchema, idSchema) {\n    const preparedSchema = Object.assign({}, specSchema);\n    preparedSchema[PROP__ID] = idSchema;\n    return preparedSchema;\n}\n\n/**\n * Replaces all internal references to the schema, with the extracted references, based on the origin OpenAPI-spec\n * @param {Object}  schema  The schema, containing references have to be replaced\n * @private\n */\nfunction _replaceRefsToPreparedSpecSchema(schema) {\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: schema,\n        callback(value, type, payload) {\n            if (!value.startsWith('#')) { return; }\n            payload.parent[payload.parentProperty] = `${ ID__SPEC_SCHEMA }${ value }`;\n        }\n    });\n}\n\n/**\n * Extracts all references and returns a new schema, containing only those.\n * @param {Object} specSchema   Schema, which references shall be extracted\n * @returns {Object}\n * @private\n */\nfunction _createReferenceSchema(specSchema) {\n    const refSchema = {\n        [PROP__ID]: ID__SPEC_SCHEMA\n    };\n    jsonPath({\n        path: JSON_PATH__REFS,\n        json: specSchema,\n        callback(value) {\n            if (!value.startsWith('#')) { return; }\n            const pointer = value.substring(1),\n                definition = JsonPointer.get(specSchema, pointer);\n            JsonPointer.set(refSchema, pointer, definition);\n        }\n    });\n    return refSchema;\n}\n","module.exports = {\"name\":\"openapi-examples-validator\",\"version\":\"5.0.0\",\"description\":\"Validates embedded examples in OpenAPI-JSONs\",\"main\":\"dist/index.js\",\"engines\":{\"node\":\">=16\"},\"bin\":{\"openapi-examples-validator\":\"dist/cli.js\"},\"standard-version\":{\"scripts\":{\"postchangelog\":\"npm run release:create-dockerfile && npm run release:stage-artifacts\"}},\"scripts\":{\"start-dev\":\"babel-node src/cli\",\"build\":\"npm run build:clean && npm run build:webpack\",\"build:clean\":\"rimraf dist\",\"build:webpack\":\"webpack --bail --progress --profile --mode production --config ./webpack/config.babel.js\",\"coverage\":\"rimraf ./coverage && nyc --reporter=lcov --reporter=text -x \\\"dist/**/*\\\" -x \\\"test/**/*.js\\\" npm test\",\"coveralls\":\"cat ./coverage/lcov.info | coveralls\",\"test\":\"npm run build && npm run test:mocha\",\"test-mutations\":\"stryker run\",\"test:mocha\":\"mocha --require \\\"./test/util/setup-tests\\\" --recursive \\\"./test/specs/**/*.js\\\"\",\"release\":\"npm run build && standard-version -a\",\"release:create-dockerfile\":\"npm run build && node etc/src/build-dockerfile.js\",\"release:stage-artifacts\":\"git add dist/*\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/codekie/openapi-examples-validator.git\"},\"keywords\":[\"swagger\",\"openapi\",\"json\",\"validate\",\"examples\"],\"author\":\"Josua Amann\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/codekie/openapi-examples-validator/issues\"},\"homepage\":\"https://github.com/codekie/openapi-examples-validator#readme\",\"devDependencies\":{\"@babel/cli\":\"^7.21.5\",\"@babel/core\":\"^7.21.8\",\"@babel/eslint-parser\":\"^7.21.8\",\"@babel/node\":\"^7.20.7\",\"@babel/preset-env\":\"^7.21.5\",\"@babel/register\":\"^7.21.0\",\"@stryker-mutator/core\":\"^6.4.2\",\"@stryker-mutator/mocha-runner\":\"^6.4.2\",\"babel-loader\":\"^9.1.2\",\"chai\":\"^4.3.6\",\"core-js-pure\":\"^3.30.2\",\"coveralls\":\"^3.1.1\",\"eslint\":\"^8.41.0\",\"eslint-webpack-plugin\":\"^4.0.1\",\"json-loader\":\"^0.5.7\",\"mocha\":\"^10.2.0\",\"mocha-lcov-reporter\":\"^1.3.0\",\"nyc\":\"^15.1.0\",\"rimraf\":\"^5.0.1\",\"standard-version\":\"^9.5.0\",\"stryker-cli\":\"^1.0.2\",\"webpack\":\"^5.83.1\",\"webpack-cli\":\"^5.1.1\"},\"dependencies\":{\"ajv\":\"^8.12.0\",\"ajv-draft-04\":\"^1.0.0\",\"ajv-formats\":\"^2.1.1\",\"commander\":\"^6.2.1\",\"errno\":\"^1.0.0\",\"glob\":\"^8.1.0\",\"json-pointer\":\"^0.6.2\",\"json-schema-ref-parser\":\"^9.0.9\",\"jsonpath-plus\":\"^7.2.0\",\"lodash.clonedeep\":\"^4.5.0\",\"lodash.flatmap\":\"^4.5.0\",\"lodash.flatten\":\"^4.4.0\",\"lodash.merge\":\"^4.6.2\",\"yaml\":\"^2.2.2\"}}","module.exports = require(\"ajv-draft-04\");","module.exports = require(\"ajv-formats\");","module.exports = require(\"commander\");","module.exports = require(\"errno\");","module.exports = require(\"glob\");","module.exports = require(\"json-pointer\");","module.exports = require(\"json-schema-ref-parser\");","module.exports = require(\"jsonpath-plus\");","module.exports = require(\"lodash.clonedeep\");","module.exports = require(\"lodash.flatmap\");","module.exports = require(\"lodash.flatten\");","module.exports = require(\"lodash.merge\");","module.exports = require(\"yaml\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(339);\n"],"names":["merge","require","ENOENT","ErrorType","jsENOENT","code","jsonPathNotFound","errorAndErrorsMutuallyExclusive","parseError","validation","ApplicationError","static","err","message","path","cause","type","options","params","constructor","Object","assign","this","module","exports","VERSION","program","validateFile","validateExample","validateExamplesByMap","ENV_TEST","process","env","OPENAPI_EXAMPLES_VALIDATOR_TESTS","version","arguments","description","option","action","async","filepath","schemaJsonpath","exampleFilepath","mappingFilepath","cwdToMappingFile","allPropertiesRequired","noAdditionalProperties","additionalProperties","ignoreFormats","Array","isArray","length","indexOf","split","filter","entry","match","_prepareIgnoreFormats","result","console","log","noExit","statistics","schemasWithExamples","examplesWithoutSchema","examplesTotal","matchingFilePathsMapping","strStatistics","push","stdout","write","join","_printStatistics","valid","exit","stderr","JSON","stringify","errors","_handleResult","on","parseAsync","argv","parent","parentProperty","pointer","value","implV2","implV3","REGEX__OPEN_API","getImplementation","openapiSpec","swagger","openapi","applyCallbackToAllObjectModels","setAllPropertiesRequired","openApiSpec","examplePaths","hasOwnProperty","required","keys","properties","JSONPath","jsonPath","ResultType","_find","json","resultType","callback","flatten","matchCallbackBuilder","paths","Set","forEach","consecutiveMatch","_isPropertiesDefinition","add","examplePath","exampleMatch","jsPath","startsWith","delete","_excludeExamples","data","entity","setNoAdditionalProperties","hasJsonCombinerParentRegex","RegExp","JSON_SCHEMA_COMBINERS","schema","test","warn","some","combiner","cloneDeep","getJsonPathsToExamples","buildValidationMap","pathsExamples","reduce","validationMap","pathExample","pathSchema","pathSegs","toPathArray","slice","idxExamples","lastIndexOf","splice","toPathString","_getSchemaPathOfExample","escapeExampleName","rawPath","prepare","openapiSpecCopy","unescapeExampleNames","ExampleType","exampleTypesOfSchemas","Map","pathSchemaAsArray","exampleType","idxExample","exampleTypeOfSchema","get","pathContextAsArray","create","pathContext","toPointer","_throwMutuallyExclusiveError","set","replace","flatMap","fs","glob","yaml","refParser","createError","getValidatorFactory","compileValidate","Determiner","createValidationResponse","dereferenceJsonSchema","SYM__INTERNAL","Symbol","PROP__SCHEMAS_WITH_EXAMPLES","FILE_EXTENSIONS__YAML","ErrorJsonPathNotFound","validateExamples","impl","dereference","res","pathToExamples","concat","jsonPathToExamples","_extractExamplePaths","map","_initStatistics","validationResult","createValidator","_initValidatorFactory","error","example","_getObjectByPath","_extractSchema","curErrors","_validateExample","_validateSchema","_validateExamplesPaths","_parseSpec","filePath","isYaml","extension","pop","includes","_isFileTypeYaml","jsonSchema","parse","readFileSync","e","name","_validate","validationHandler","_handleExamplesByMapValidation","mapExternalExamples","dirPathMapExternalExamples","entries","filePathsExample","filePathExample","examples","resolvedFilePathExample","globResolvedFilePathExample","sync","normalize","content","defineProperty","enumerable","size","wrap","validate","exampleFilePath","specSchema","schemaId","discriminator","strict","allErrors","formats","suppressErrorIfNotFound","filePathSchema","globMapExternalExamples","filePathsMaps","nonull","responses","filePathMapExternalExamples","dirname","mapFilePath","response","response2","response1","key","val","schemasWithExample","values","pathToSchema","currentWorkingDir","cwd","chdir","dereferencedSchema","JsonPointer","Ajv","addFormats","JSON_PATH__REFS","ID__SPEC_SCHEMA","preparedSpecSchema","refSchema","substring","definition","_createReferenceSchema","validator","addSchema","responseSchema","preparedResponseSchema","idSchema","preparedSchema","_prepareResponseSchema","payload","compile","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}